{"is_source_file": true, "format": "Python", "description": "This file is a Python module implementing device management services for a backend API. It provides functions to list, create, retrieve, update, delete, and ping devices stored in a MongoDB database, with validation and serialization logic.", "external_files": ["../db", "../validators", "../utils"], "external_methods": ["get_db", "validate_device_payload", "to_object_id", "now_utc", "try_ping"], "published": ["list_devices", "create_device", "get_device", "update_device", "delete_device", "ping_device"], "classes": [], "methods": [{"name": "Collection _devices_col()", "description": "Private helper to get the 'devices' collection from the database.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,Any] _serialize(doc: Dict[str, Any])", "description": "Converts a MongoDB document into a JSON-serializable dictionary, formatting ObjectId and datetime fields.", "scope": "", "scopeKind": ""}, {"name": "Tuple[List[Dict[str,Any]],Dict[str,int]] list_devices(filters: Dict[str, Optional[str]], page: int = 1, page_size: int = 20)", "description": "Lists devices with optional filters and pagination, returning a list of serialized device documents and metadata.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,Any] create_device(payload: Dict[str, Any])", "description": "Creates a new device document in the database after validation.", "scope": "", "scopeKind": ""}, {"name": "Optional[Dict[str,Any]] get_device(device_id: str)", "description": "Retrieves a device by its ID and returns its serialized representation.", "scope": "", "scopeKind": ""}, {"name": "Optional[Dict[str,Any]] update_device(device_id: str, payload: Dict[str, Any])", "description": "Performs partial update of a device document by its ID.", "scope": "", "scopeKind": ""}, {"name": "bool delete_device(device_id: str)", "description": "Deletes a device by its ID, returning boolean indicating success.", "scope": "", "scopeKind": ""}, {"name": "Optional[Dict[str,Any]] ping_device(device_id: str)", "description": "Pings a device to check its status, updating 'status' and 'last_checked' fields.", "scope": "", "scopeKind": ""}], "calls": ["get_db", "validate_device_payload", "to_object_id", "now_utc", "try_ping", "Collection.find", "Collection.find_one", "Collection.find_one_and_update", "Collection.insert_one", "Collection.count_documents", "Collection.delete_one"], "search-terms": ["device_service", "list_devices", "ping_device", "MongoDB devices", "device CRUD"], "state": 2, "file_id": 14, "knowledge_revision": 31, "git_revision": "", "ctags": [{"_type": "tag", "name": "_devices_col", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/services/device_service.py", "pattern": "/^def _devices_col() -> Collection:$/", "language": "Python", "typeref": "typename:Collection", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "_serialize", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/services/device_service.py", "pattern": "/^def _serialize(doc: Dict[str, Any]) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "(doc: Dict[str, Any])"}, {"_type": "tag", "name": "create_device", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/services/device_service.py", "pattern": "/^def create_device(payload: Dict[str, Any]) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "(payload: Dict[str, Any])"}, {"_type": "tag", "name": "delete_device", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/services/device_service.py", "pattern": "/^def delete_device(device_id: str) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "function", "signature": "(device_id: str)"}, {"_type": "tag", "name": "get_device", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/services/device_service.py", "pattern": "/^def get_device(device_id: str) -> Optional[Dict[str, Any]]:$/", "language": "Python", "typeref": "typename:Optional[Dict[str,Any]]", "kind": "function", "signature": "(device_id: str)"}, {"_type": "tag", "name": "list_devices", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/services/device_service.py", "pattern": "/^def list_devices(filters: Dict[str, Optional[str]], page: int = 1, page_size: int = 20) -> Tuple/", "language": "Python", "typeref": "typename:Tuple[List[Dict[str,Any]],Dict[str,int]]", "kind": "function", "signature": "(filters: Dict[str, Optional[str]], page: int = 1, page_size: int = 20)"}, {"_type": "tag", "name": "ping_device", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/services/device_service.py", "pattern": "/^def ping_device(device_id: str) -> Optional[Dict[str, Any]]:$/", "language": "Python", "typeref": "typename:Optional[Dict[str,Any]]", "kind": "function", "signature": "(device_id: str)"}, {"_type": "tag", "name": "update_device", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/services/device_service.py", "pattern": "/^def update_device(device_id: str, payload: Dict[str, Any]) -> Optional[Dict[str, Any]]:$/", "language": "Python", "typeref": "typename:Optional[Dict[str,Any]]", "kind": "function", "signature": "(device_id: str, payload: Dict[str, Any])"}], "hash": "722c2e5a5ee61de067e1825bab166402", "format-version": 4, "code-base-name": "BackendAPIService", "filename": "BackendAPIService/app/services/device_service.py", "revision_history": [{"31": ""}]}