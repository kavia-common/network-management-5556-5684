{"is_source_file": true, "format": "Python", "description": "This file manages MongoDB connections, including environment-based configuration, index setup, and health checks for a network device management backend.", "external_files": ["os", "threading", "urllib.parse", "typing", "pymongo.MongoClient", "pymongo.ASCENDING", "pymongo.collection.Collection", "pymongo.database.Database", "pymongo.errors.PyMongoError"], "external_methods": ["MongoClient.admin.command", "Collection.create_index", "Database.__getitem__"], "published": ["get_client", "get_db", "get_collection", "ping"], "classes": [], "methods": [{"name": "bool _env_bool(value: Optional[str])", "description": "Parses environment variable string values into boolean.", "scope": "", "scopeKind": ""}, {"name": "str _mask_uri(uri: str)", "description": "Masks credentials in MongoDB URI for logging.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,str] _effective_target_info(uri: str, timeout_ms: int, tls: bool, db_name: str)", "description": "Builds a dictionary with sanitized connection info for logging and error messages.", "scope": "", "scopeKind": ""}, {"name": "Tuple[str,str] _build_uri_from_parts()", "description": "Constructs a MongoDB URI from environment variables if not provided directly.", "scope": "", "scopeKind": ""}, {"name": "Tuple[MongoClient,str] _build_mongo_client()", "description": "Creates a MongoClient instance based on environment variables, with logging.", "scope": "", "scopeKind": ""}, {"name": "None _ensure_indexes(db: Database)", "description": "Ensures required indexes exist on the devices collection.", "scope": "", "scopeKind": ""}, {"name": "MongoClient get_client()", "description": "Returns a singleton MongoClient, initializing and verifying connection if necessary.", "scope": "", "scopeKind": ""}, {"name": "Database get_db()", "description": "Returns the default Database instance, initializing client if needed.", "scope": "", "scopeKind": ""}, {"name": "Collection get_collection(name: str)", "description": "Returns a specific collection from the default database.", "scope": "", "scopeKind": ""}, {"name": "Tuple[bool,Optional[str]] ping()", "description": "Performs health check on MongoDB connection, with error handling and masked details.", "scope": "", "scopeKind": ""}], "calls": ["MongoClient.admin.command", "Collection.create_index", "Database.__getitem__"], "search-terms": ["MongoDB connection", "database index setup", "MongoClient singleton", "MongoDB URI construction", "health check MongoDB", "network management backend", "environment configuration"], "state": 2, "file_id": 7, "knowledge_revision": 65, "git_revision": "a78b6cd64fc78e63c845f6d486df2ef3d7e66f85", "revision_history": [{"15": ""}, {"21": "4aec4babf8e89e23220e5a73b08a59ced77c5faf"}, {"38": "4aec4babf8e89e23220e5a73b08a59ced77c5faf"}, {"46": "4f44e20b9d9eeb58b7fb8b9a9753b5184f88afe8"}, {"47": "4f44e20b9d9eeb58b7fb8b9a9753b5184f88afe8"}, {"48": "4f44e20b9d9eeb58b7fb8b9a9753b5184f88afe8"}, {"52": "5f5fbeba6bd97a600b0e8963b5183811ac776ffb"}, {"53": "5f5fbeba6bd97a600b0e8963b5183811ac776ffb"}, {"54": "5f5fbeba6bd97a600b0e8963b5183811ac776ffb"}, {"64": "a78b6cd64fc78e63c845f6d486df2ef3d7e66f85"}, {"65": "a78b6cd64fc78e63c845f6d486df2ef3d7e66f85"}], "ctags": [{"_type": "tag", "name": "DEFAULT_DB_NAME", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^DEFAULT_DB_NAME = \"network_devices\"  # Default DB per task requirement$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "DEVICES_COLLECTION", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^DEVICES_COLLECTION = os.environ.get(\"MONGODB_COLLECTION\", \"device\")$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "_build_mongo_client", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^def _build_mongo_client() -> Tuple[MongoClient, str]:$/", "language": "Python", "typeref": "typename:Tuple[MongoClient,str]", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "_build_uri_from_parts", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^def _build_uri_from_parts() -> Tuple[str, str]:$/", "language": "Python", "typeref": "typename:Tuple[str,str]", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "_client", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^_client: Optional[MongoClient] = None$/", "language": "Python", "typeref": "typename:Optional[MongoClient]", "kind": "variable"}, {"_type": "tag", "name": "_client_lock", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^_client_lock = threading.Lock()$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "_db", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^_db: Optional[Database] = None$/", "language": "Python", "typeref": "typename:Optional[Database]", "kind": "variable"}, {"_type": "tag", "name": "_effective_target_info", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^def _effective_target_info(uri: str, timeout_ms: int, tls: bool, db_name: str) -> Dict[str, str]/", "language": "Python", "typeref": "typename:Dict[str,str]", "kind": "function", "signature": "(uri: str, timeout_ms: int, tls: bool, db_name: str)"}, {"_type": "tag", "name": "_ensure_indexes", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^def _ensure_indexes(db: Database) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "function", "signature": "(db: Database)"}, {"_type": "tag", "name": "_env_bool", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^def _env_bool(value: Optional[str]) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "function", "signature": "(value: Optional[str])"}, {"_type": "tag", "name": "_mask_uri", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^def _mask_uri(uri: str) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "function", "signature": "(uri: str)"}, {"_type": "tag", "name": "get_client", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^def get_client() -> MongoClient:$/", "language": "Python", "typeref": "typename:MongoClient", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "get_collection", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^def get_collection(name: str) -> Collection:$/", "language": "Python", "typeref": "typename:Collection", "kind": "function", "signature": "(name: str)"}, {"_type": "tag", "name": "get_db", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^def get_db() -> Database:$/", "language": "Python", "typeref": "typename:Database", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "ping", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^def ping() -> Tuple[bool, Optional[str]]:$/", "language": "Python", "typeref": "typename:Tuple[bool,Optional[str]]", "kind": "function", "signature": "()"}], "hash": "4ff5d1afeeb33141ec33a4862a295067", "format-version": 4, "code-base-name": "BackendAPIService", "filename": "BackendAPIService/app/db.py", "fields": [{"name": "DEFAULT_DB_NAME = \"network_devices\"  # Default DB per task requirement", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "DEVICES_COLLECTION = os.environ.get(\"MONGODB_COLLECTION\", \"device\")", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "Optional[MongoClient] _client", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "_client_lock = threading.Lock()", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "Optional[Database] _db", "scope": "", "scopeKind": "", "description": "unavailable"}]}