{"is_source_file": true, "format": "Python", "description": "This file defines a Database class that manages a MongoDB connection with lazy initialization, index creation, and error handling. It provides methods to connect to the database, handle connection retries, and convert string IDs to ObjectIds. It also includes a utility function to retrieve the database instance from a Flask application context.", "external_files": ["pymongo", "flask", "bson"], "external_methods": ["MongoClient", "MongoClient.admin.command", "ObjectId.is_valid"], "published": ["get_db"], "classes": [{"name": "Database", "description": "A wrapper class for managing MongoDB connections, collections, and indexes with lazy connection strategy and error handling."}], "methods": [{"name": "__init__(self, uri: str, db_name: str, tls: bool = False, username: Optional[str] = None, password: Optional[str] = None)", "description": "Initializes the Database object with connection parameters.", "scope": "Database", "scopeKind": "class"}, {"name": "connect(self)", "description": "Establishes a connection to MongoDB and creates indexes; raises RuntimeError if unable to connect.", "scope": "Database", "scopeKind": "class"}, {"name": "None try_connect(self)", "description": "Attempts to connect if not already connected, but does not raise exceptions upon failure.", "scope": "Database", "scopeKind": "class"}, {"name": "_create_indexes(self)", "description": "Creates indexes on the devices collection to optimize queries and enforce uniqueness.", "scope": "Database", "scopeKind": "class"}, {"name": "db(self)", "description": "Property to access the current database object, attempting to connect if necessary.", "scope": "Database", "scopeKind": "class"}, {"name": "devices(self)", "description": "Property to access the devices collection within the database.", "scope": "Database", "scopeKind": "class"}, {"name": "ObjectId to_object_id(id_str: str)", "description": "Converts a string to an ObjectId, raising ValueError if the string is invalid.", "scope": "Database", "scopeKind": "class"}, {"name": "Database get_db()", "scope": "", "scopeKind": "", "description": "unavailable"}], "calls": ["self._client.admin.command", "self._create_indexes", "ObjectId.is_valid"], "search-terms": ["MongoDB connection management", "lazy connection", "Index creation", "Flask current_app extensions", "ObjectId conversion"], "state": 2, "file_id": 8, "knowledge_revision": 41, "git_revision": "1abba53b5a158a0036e722b1cf9e284b7b36126c", "revision_history": [{"17": ""}, {"35": "1abba53b5a158a0036e722b1cf9e284b7b36126c"}, {"41": "1abba53b5a158a0036e722b1cf9e284b7b36126c"}], "ctags": [{"_type": "tag", "name": "Database", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^class Database:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^    def __init__(self, uri: str, db_name: str, tls: bool = False, username: Optional[str] = None/", "language": "Python", "kind": "member", "signature": "(self, uri: str, db_name: str, tls: bool = False, username: Optional[str] = None, password: Optional[str] = None)", "scope": "Database", "scopeKind": "class"}, {"_type": "tag", "name": "_create_indexes", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^    def _create_indexes(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "Database", "scopeKind": "class"}, {"_type": "tag", "name": "connect", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^    def connect(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "Database", "scopeKind": "class"}, {"_type": "tag", "name": "db", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^    def db(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "Database", "scopeKind": "class"}, {"_type": "tag", "name": "devices", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^    def devices(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "Database", "scopeKind": "class"}, {"_type": "tag", "name": "get_db", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^def get_db() -> Database:$/", "language": "Python", "typeref": "typename:Database", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "to_object_id", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^    def to_object_id(id_str: str) -> ObjectId:$/", "language": "Python", "typeref": "typename:ObjectId", "kind": "member", "signature": "(id_str: str)", "scope": "Database", "scopeKind": "class"}, {"_type": "tag", "name": "try_connect", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^    def try_connect(self) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self)", "scope": "Database", "scopeKind": "class"}], "hash": "ca7a8a08b6f3f307d2d6066633b4d66e", "format-version": 4, "code-base-name": "BackendAPIService", "filename": "BackendAPIService/app/db.py"}