{"is_source_file": true, "format": "Python", "description": "This file defines a repository interface for managing device data with implementations for MongoDB and in-memory storage, including CRUD operations, index management, and database initialization logic.", "external_files": ["from .config import Config", "from .utils import now_utc", "from pymongo import MongoClient, ASCENDING, errors", "from pymongo.collection import Collection", "from bson import ObjectId", "from flask import current_app"], "external_methods": ["current_app.config.get", "MongoClient.admin.command", "client.admin.command", "client[db_name]", "collection.create_index", "collection.insert_one", "collection.find_one", "collection.find_one_and_update", "collection.delete_one", "collection.count_documents", "collection.find", "current_app.logger.warning", "current_app.logger.info"], "published": ["get_repository", "get_db_mode", "init_db", "DeviceRepository", "DuplicateIPError"], "classes": [{"name": "RepositoryError", "description": "Base exception class for repository-related errors."}, {"name": "DeviceRepository", "description": "Abstract interface defining CRUD operations for device storage backends."}, {"name": "MongoDeviceRepository", "description": "MongoDB implementation of the DeviceRepository interface, handling device CRUD operations with index management."}, {"name": "MemoryDeviceRepository", "description": "In-memory implementation of the DeviceRepository interface, suitable for testing or ephemeral data storage."}], "methods": [{"name": "None init(self)", "description": "Initializes the repository, setting up indexes or in-memory structures.", "scope": "MongoDeviceRepository", "scopeKind": "class"}, {"name": "None ensure_indexes(self)", "description": "Creates necessary indexes for the underlying data store.", "scope": "MongoDeviceRepository", "scopeKind": "class"}, {"name": "Dict[str,Any] create_device(self, data: Dict[str, Any])", "description": "Creates a new device record in the data store.", "scope": "MongoDeviceRepository", "scopeKind": "class"}, {"name": "Optional[Dict[str,Any]] get_device_by_id(self, device_id: str)", "description": "Fetches a device by its unique ObjectId string.", "scope": "MongoDeviceRepository", "scopeKind": "class"}, {"name": "Optional[Dict[str,Any]] get_device_by_ip(self, ip: str)", "description": "Retrieves a device record by its IP address.", "scope": "MongoDeviceRepository", "scopeKind": "class"}, {"name": "Tuple[List[Dict[str,Any]],Dict[str,int]] list_devices( self, filters: Dict[str, Optional[str]], pagination: Tuple[int, int], sorting: Tuple[str, int], )", "description": "Retrieves a list of devices matching filters, with pagination and sorting.", "scope": "MongoDeviceRepository", "scopeKind": "class"}, {"name": "Optional[Dict[str,Any]] update_device(self, device_id: str, data: Dict[str, Any])", "description": "Updates an existing device record with new data.", "scope": "MongoDeviceRepository", "scopeKind": "class"}, {"name": "bool delete_device(self, device_id: str)", "description": "Deletes a device record by its id.", "scope": "MongoDeviceRepository", "scopeKind": "class"}, {"name": "dict _get_tls_option(cfg: Config)", "description": "Derives TLS connection options from the configuration.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,Any] _serialize_mongo(doc: Dict[str, Any])", "description": "Serializes MongoDB documents into JSON-serializable dicts, formatting dates and IDs.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,Any] _serialize_mem(doc: Dict[str, Any])", "description": "Serializes in-memory device documents into JSON-serializable dicts, formatting dates.", "scope": "", "scopeKind": ""}, {"name": "DeviceRepository get_repository()", "description": "Retrieves the active device repository instance from Flask app context.", "scope": "", "scopeKind": ""}, {"name": "str get_db_mode()", "description": "Returns the current database mode ('mongo' or 'memory').", "scope": "", "scopeKind": ""}, {"name": "None init_db(app)", "description": "Initializes the database connection and repository based on configuration, with fallback mechanisms.", "scope": "", "scopeKind": ""}, {"name": "None __init__(self)", "scope": "MemoryDeviceRepository", "scopeKind": "class", "description": "unavailable"}, {"name": "None __init__(self, client: MongoClient, db_name: str)", "scope": "MongoDeviceRepository", "scopeKind": "class", "description": "unavailable"}, {"name": "Collection _col(self)", "scope": "MongoDeviceRepository", "scopeKind": "class", "description": "unavailable"}, {"name": "bool matches(d: Dict[str, Any])", "scope": "MemoryDeviceRepository.list_devices", "scopeKind": "member", "description": "unavailable"}, {"name": "sort_key(d: Dict[str, Any])", "scope": "MemoryDeviceRepository.list_devices", "scopeKind": "member", "description": "unavailable"}], "calls": ["client.admin.command('ping')", "self._col().create_index", "self._col().insert_one", "self._col().find_one", "self._col().find_one_and_update", "self._col().delete_one", "self._col().count_documents", "self._col().find", "current_app.config.get", "current_app.logger.warning", "current_app.logger.info"], "search-terms": ["DeviceRepository", "MongoDeviceRepository", "MemoryDeviceRepository", "init_db", "Database initialization", "device CRUD", "MongoDB", "In-memory repository", "Index management", "Flask app config", "repository pattern", "Python database layer"], "state": 2, "file_id": 8, "knowledge_revision": 47, "git_revision": "d1d43c29391203220dd9371de18e2ef73404d66c", "revision_history": [{"18": ""}, {"43": ""}, {"47": "d1d43c29391203220dd9371de18e2ef73404d66c"}], "ctags": [{"_type": "tag", "name": "DeviceRepository", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^class DeviceRepository:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "DuplicateIPError", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^class DuplicateIPError(RepositoryError):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "MemoryDeviceRepository", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^class MemoryDeviceRepository(DeviceRepository):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "MongoDeviceRepository", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^class MongoDeviceRepository(DeviceRepository):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "RepositoryError", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^class RepositoryError(Exception):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "_DB_MODE_KEY", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^_DB_MODE_KEY = \"_db_mode\"$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "_REPOSITORY_KEY", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^_REPOSITORY_KEY = \"_active_repository\"$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^    def __init__(self) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self)", "scope": "MemoryDeviceRepository", "scopeKind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^    def __init__(self, client: MongoClient, db_name: str) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self, client: MongoClient, db_name: str)", "scope": "MongoDeviceRepository", "scopeKind": "class"}, {"_type": "tag", "name": "_col", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^    def _col(self) -> Collection:$/", "language": "Python", "typeref": "typename:Collection", "kind": "member", "signature": "(self)", "scope": "MongoDeviceRepository", "scopeKind": "class"}, {"_type": "tag", "name": "_get_tls_option", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^def _get_tls_option(cfg: Config) -> dict:$/", "language": "Python", "typeref": "typename:dict", "kind": "function", "signature": "(cfg: Config)"}, {"_type": "tag", "name": "_serialize_mem", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^def _serialize_mem(doc: Dict[str, Any]) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "(doc: Dict[str, Any])"}, {"_type": "tag", "name": "_serialize_mongo", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^def _serialize_mongo(doc: Dict[str, Any]) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "(doc: Dict[str, Any])"}, {"_type": "tag", "name": "create_device", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^    def create_device(self, data: Dict[str, Any]) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, data: Dict[str, Any])", "scope": "DeviceRepository", "scopeKind": "class"}, {"_type": "tag", "name": "create_device", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^    def create_device(self, data: Dict[str, Any]) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, data: Dict[str, Any])", "scope": "MemoryDeviceRepository", "scopeKind": "class"}, {"_type": "tag", "name": "create_device", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^    def create_device(self, data: Dict[str, Any]) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, data: Dict[str, Any])", "scope": "MongoDeviceRepository", "scopeKind": "class"}, {"_type": "tag", "name": "delete_device", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^    def delete_device(self, device_id: str) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "member", "signature": "(self, device_id: str)", "scope": "DeviceRepository", "scopeKind": "class"}, {"_type": "tag", "name": "delete_device", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^    def delete_device(self, device_id: str) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "member", "signature": "(self, device_id: str)", "scope": "MemoryDeviceRepository", "scopeKind": "class"}, {"_type": "tag", "name": "delete_device", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^    def delete_device(self, device_id: str) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "member", "signature": "(self, device_id: str)", "scope": "MongoDeviceRepository", "scopeKind": "class"}, {"_type": "tag", "name": "ensure_indexes", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^    def ensure_indexes(self) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self)", "scope": "DeviceRepository", "scopeKind": "class"}, {"_type": "tag", "name": "ensure_indexes", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^    def ensure_indexes(self) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self)", "scope": "MemoryDeviceRepository", "scopeKind": "class"}, {"_type": "tag", "name": "ensure_indexes", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^    def ensure_indexes(self) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self)", "scope": "MongoDeviceRepository", "scopeKind": "class"}, {"_type": "tag", "name": "get_db_mode", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^def get_db_mode() -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "get_device_by_id", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^    def get_device_by_id(self, device_id: str) -> Optional[Dict[str, Any]]:$/", "language": "Python", "typeref": "typename:Optional[Dict[str,Any]]", "kind": "member", "signature": "(self, device_id: str)", "scope": "DeviceRepository", "scopeKind": "class"}, {"_type": "tag", "name": "get_device_by_id", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^    def get_device_by_id(self, device_id: str) -> Optional[Dict[str, Any]]:$/", "language": "Python", "typeref": "typename:Optional[Dict[str,Any]]", "kind": "member", "signature": "(self, device_id: str)", "scope": "MemoryDeviceRepository", "scopeKind": "class"}, {"_type": "tag", "name": "get_device_by_id", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^    def get_device_by_id(self, device_id: str) -> Optional[Dict[str, Any]]:$/", "language": "Python", "typeref": "typename:Optional[Dict[str,Any]]", "kind": "member", "signature": "(self, device_id: str)", "scope": "MongoDeviceRepository", "scopeKind": "class"}, {"_type": "tag", "name": "get_device_by_ip", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^    def get_device_by_ip(self, ip: str) -> Optional[Dict[str, Any]]:$/", "language": "Python", "typeref": "typename:Optional[Dict[str,Any]]", "kind": "member", "signature": "(self, ip: str)", "scope": "DeviceRepository", "scopeKind": "class"}, {"_type": "tag", "name": "get_device_by_ip", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^    def get_device_by_ip(self, ip: str) -> Optional[Dict[str, Any]]:$/", "language": "Python", "typeref": "typename:Optional[Dict[str,Any]]", "kind": "member", "signature": "(self, ip: str)", "scope": "MemoryDeviceRepository", "scopeKind": "class"}, {"_type": "tag", "name": "get_device_by_ip", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^    def get_device_by_ip(self, ip: str) -> Optional[Dict[str, Any]]:$/", "language": "Python", "typeref": "typename:Optional[Dict[str,Any]]", "kind": "member", "signature": "(self, ip: str)", "scope": "MongoDeviceRepository", "scopeKind": "class"}, {"_type": "tag", "name": "get_repository", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^def get_repository() -> DeviceRepository:$/", "language": "Python", "typeref": "typename:DeviceRepository", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "init", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^    def init(self) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self)", "scope": "DeviceRepository", "scopeKind": "class"}, {"_type": "tag", "name": "init", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^    def init(self) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self)", "scope": "MemoryDeviceRepository", "scopeKind": "class"}, {"_type": "tag", "name": "init", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^    def init(self) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self)", "scope": "MongoDeviceRepository", "scopeKind": "class"}, {"_type": "tag", "name": "init_db", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^def init_db(app) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "function", "signature": "(app)"}, {"_type": "tag", "name": "list_devices", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^    def list_devices($/", "language": "Python", "typeref": "typename:Tuple[List[Dict[str,Any]],Dict[str,int]]", "kind": "member", "signature": "( self, filters: Dict[str, Optional[str]], pagination: Tuple[int, int], sorting: Tuple[str, int], )", "scope": "DeviceRepository", "scopeKind": "class"}, {"_type": "tag", "name": "list_devices", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^    def list_devices($/", "language": "Python", "typeref": "typename:Tuple[List[Dict[str,Any]],Dict[str,int]]", "kind": "member", "signature": "( self, filters: Dict[str, Optional[str]], pagination: Tuple[int, int], sorting: Tuple[str, int], )", "scope": "MemoryDeviceRepository", "scopeKind": "class"}, {"_type": "tag", "name": "list_devices", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^    def list_devices($/", "language": "Python", "typeref": "typename:Tuple[List[Dict[str,Any]],Dict[str,int]]", "kind": "member", "signature": "( self, filters: Dict[str, Optional[str]], pagination: Tuple[int, int], sorting: Tuple[str, int], )", "scope": "MongoDeviceRepository", "scopeKind": "class"}, {"_type": "tag", "name": "matches", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^                def matches(d: Dict[str, Any]) -> bool:$/", "file": true, "language": "Python", "typeref": "typename:bool", "kind": "function", "signature": "(d: Dict[str, Any])", "scope": "MemoryDeviceRepository.list_devices", "scopeKind": "member"}, {"_type": "tag", "name": "sort_key", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^            def sort_key(d: Dict[str, Any]):$/", "file": true, "language": "Python", "kind": "function", "signature": "(d: Dict[str, Any])", "scope": "MemoryDeviceRepository.list_devices", "scopeKind": "member"}, {"_type": "tag", "name": "update_device", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^    def update_device(self, device_id: str, data: Dict[str, Any]) -> Optional[Dict[str, Any]]:$/", "language": "Python", "typeref": "typename:Optional[Dict[str,Any]]", "kind": "member", "signature": "(self, device_id: str, data: Dict[str, Any])", "scope": "DeviceRepository", "scopeKind": "class"}, {"_type": "tag", "name": "update_device", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^    def update_device(self, device_id: str, data: Dict[str, Any]) -> Optional[Dict[str, Any]]:$/", "language": "Python", "typeref": "typename:Optional[Dict[str,Any]]", "kind": "member", "signature": "(self, device_id: str, data: Dict[str, Any])", "scope": "MemoryDeviceRepository", "scopeKind": "class"}, {"_type": "tag", "name": "update_device", "path": "/home/kavia/workspace/code-generation/network-management-5556-5684/BackendAPIService/app/db.py", "pattern": "/^    def update_device(self, device_id: str, data: Dict[str, Any]) -> Optional[Dict[str, Any]]:$/", "language": "Python", "typeref": "typename:Optional[Dict[str,Any]]", "kind": "member", "signature": "(self, device_id: str, data: Dict[str, Any])", "scope": "MongoDeviceRepository", "scopeKind": "class"}], "hash": "44c1e2ab7ab0fcfb2903d89d434518e9", "format-version": 4, "code-base-name": "BackendAPIService", "filename": "BackendAPIService/app/db.py", "fields": [{"name": "_DB_MODE_KEY = \"_db_mode\"", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "_REPOSITORY_KEY = \"_active_repository\"", "scope": "", "scopeKind": "", "description": "unavailable"}]}